/*
 * SOFTWARE RIGHTS
 *
 * We reserve no LEGAL rights to the Purdue Compiler Construction Tool
 * Set (PCCTS) -- PCCTS is in the public domain.  An individual or
 * company may do whatever they wish with source code distributed with
 * PCCTS or the code generated by PCCTS, including the incorporation of
 * PCCTS, or its output, into commerical software.
 *
 * We encourage users to develop software with PCCTS.  However, we do ask
 * that credit is given to us for developing PCCTS.  By "credit",
 * we mean that if you incorporate our source code into one of your
 * programs (commercial product, research project, or otherwise) that you
 * acknowledge this fact somewhere in the documentation, research report,
 * etc...  If you like PCCTS and have developed a nice tool with the
 * output, please mention that you developed it using PCCTS.  In
 * addition, we ask that this header remain intact in our source code.
 * As long as these guidelines are kept, we expect to continue enhancing
 * this system and expect to make other tools available as they are
 * completed.
 */

/**
 * \file automata.h
 * Automata conversion functions for DLG
 */

#ifndef AUTOMATA_H__
#define AUTOMATA_H__


#include <stdio.h>
#include <stdlib.h>

#include "dlg.h"
#include "relabel.h"


#define hash_list struct _hash_list_
hash_list{
  hash_list *next;  /* next thing in list */
  dfa_node *node;
};


#define DFA_MIN   64  /* minimum dfa_array size */
/******** macros for accessing the DFA nodes ****/
#define DFA(x)  (dfa_array[x])
#define DFA_NO(x) ( (x) ? (x)->node_no : NIL_INDEX)


extern int dfa_allocated;  /* keeps track of number of dfa nodes */
extern dfa_node **dfa_array;  /* start of dfa "array" */


void make_dfa_model_node(int width);


/**
 * past a pointer to the start start of the nfa graph
 * nfa_to_dfa convers this graph to dfa.  The function returns
 * a pointer to the first dfa state.
 * NOTE:  The function that prints out the table will have to figure out how
 * to find the other dfa states given the first dfa_state and the number of dfa
 * nodes allocated
 */
dfa_node **nfa_to_dfa(nfa_node *start);

void clear_hash();


#endif
