/*
 * proto.h
 *
 * SOFTWARE RIGHTS
 *
 * We reserve no LEGAL rights to SORCERER -- SORCERER is in the public
 * domain.  An individual or company may do whatever they wish with
 * source code distributed with SORCERER or the code generated by
 * SORCERER, including the incorporation of SORCERER, or its output, into
 * commerical software.
 *
 * We encourage users to develop software with SORCERER.  However, we do
 * ask that credit is given to us for developing SORCERER.  By "credit",
 * we mean that if you incorporate our source code into one of your
 * programs (commercial product, research project, or otherwise) that you
 * acknowledge this fact somewhere in the documentation, research report,
 * etc...  If you like SORCERER and have developed a nice tool with the
 * output, please mention that you developed it using SORCERER.  In
 * addition, we ask that this header remain intact in our source code.
 * As long as these guidelines are kept, we expect to continue enhancing
 * this system and expect to make other tools available as they are
 * completed.
 *
 * SORCERER 1.00B
 * Terence Parr
 * AHPCRC, University of Minnesota
 * 1992-2001
 */

#include <stdio.h>
#include "hash.h"

        /* G l o b a l s */

extern char *VersionNumber;
extern char *VersionText;
extern char *FileStr[];
extern int  NumFiles;
extern int  action_file;
extern int  action_line;
extern int  CurFile;
extern char *CurRule;
extern char *CurRetDef;
extern char *CurParmDef;
extern FILE *output;
extern FILE *input;
extern Entry **symbols;
extern int token_table_size;
extern char **token_dict;
extern int token_type;
extern int end_of_input;
extern int epsilon;
extern int last_valid_token;
extern char *OutputDirectory;
extern ListNode *before_actions, *after_actions, *class_actions;
extern char translator[];
extern char tokdefs_file[];
extern char *header_action;
extern struct _ast *rules;
extern int print_guts;
extern int transform;
extern int found_guess_block;
extern ListNode *token_list;
extern char *def_token_file;
extern int def_tokens;
extern int found_error;
extern set referenced_tokens;
extern int wild_card;
extern int UserDefdTokens;
extern int Inline;
extern char *Prefix;
extern FILE *ProtoFILE;
extern char *GenProtoFile;
extern ListNode *RefVars;
extern ListNode *AllRefVars;
extern ListNode *AllGlobVars;
extern char CurRefVarType[];
extern char CurRefVarLabel[];
extern char CurClassName[];
extern int GenCPP;
extern int NoCtor; /* MR23 */

                           /* F u n c t i o n s */

extern int main( int, char *[] );
extern int stricmp(const char *, const char *);   /* MR20 */
extern void help( void );
extern FILE * NextFile( void );
extern void pushint( int );
extern int popint( void );
extern int istacksize( void );
extern void istackreset( void );
extern int istackempty( void );
extern int topint( void );
extern char * eMsg3( char *, char *, char *, char * );
extern char * eMsgd( char *, int );
extern void fatalFL( char *, char *, int );
extern void list_add( ListNode **, void * );
extern Entry * newEntry( char *, int );
extern void token_association( int, char * );
extern char * outname( char * );
extern char * OutMetaName( char * );
extern void set_fprint( FILE *, set );
extern void gen_info_hdr( FILE * );
extern void gen( AST * );
extern void gen_header( AST * );
extern void dumpAction( char *, FILE *, int, int, int, int );
extern void GenRulePrototypes( FILE *, int );
extern void gen_tokens_file( void );
extern set Lookahead( GLA * );
extern void build_GLA( AST * );
extern GLA * build_GLA_for_block( AST *, GLA ** );
extern GLA * build_GLA_for_ALT( AST *, GLA ** );
extern GLA * build_GLA_for_tree( AST *, GLA ** );
extern GLA * build_GLA_for_element( AST *, GLA ** );
extern void build_follow_links( GLA *, ListNode * );
extern void dump_GLAs( AST * );
extern void dump_GLA( GLA * );
extern void test_block_consistency( AST *, int );
extern void DumpOldStyleParms( char *pdecl, FILE *output );
extern int DumpNextNameInDef( char **q, FILE *output );
extern void DumpListOfParmNames( char *pdecl, FILE *output );
extern SymEntry *define_token(char *text);
extern char *actiondup(char *s);
extern AST *read_sor_desc(FILE *f);
extern void DumpType( char *s, FILE *f, char *file, int line );
extern RefVarRec *refVarRec(char *);
extern char *cvt_token_str(char *, char *);
extern char *id_in_decl( char *decl );
extern void dump_prefixed_decl( char *prefix, char *s, FILE *f );
extern void ensure_no_C_file_collisions(char *class_c_file);
extern void GenCPPClassHeader(void);
extern void GenCPPClassCode(void);
